import os
import mysql.connector
import random
import time


def clear():
    # Detect operating system and run the right command
    os.system('cls' if os.name == 'nt' else 'clear')


def crying_ape(prompt: str):
    frames = [
        "(T_T)",
        "(T^T)",
        "(T_T)",
        "(T~T)",
        "(T_T)  *",
        "(T^T)  **",
        "(T~T)  ***",
    ]

    for i in range(30):  # repeat animation
        clear()
        print(frames[i % len(frames)])
        print("\n" + prompt)
        time.sleep(0.15)


def connect_to_database():
    """Yhdist√§ tietokantaan turvallisesti"""
    try:
        yhteys = mysql.connector.connect(
            host='127.0.0.1',
            port=3306,
            database='flight_game',
            user='root',
            password='nooanooa',
            autocommit=True,
        )
        return yhteys
    except mysql.connector.Error as err:
        print(f"Tietokantayhteyden muodostaminen ep√§onnistui: {err}")
        return None


def print_story():
    """Tulosta pelin tarina"""
    print("""Er√§√§n√§ p√§iv√§n√§ lent√§v√§ apina ja h√§nen kymmenen pient√§ lastaan olivat matkalla takaisin kotiin, Suomeen.
Taivas yll√§tt√§en tummui, ja heid√§n ylleen nousi raivokas myrsky.

Kovat tuulet tarttuivat pieniin apinanpoikasiin ja lenn√§ttiv√§t heid√§t kauas, ymp√§ri Euroopan maita.
√Ñitiapina kauhistui. H√§n yritti tavoittaa lapsiaan, mutta tuulen voima oli liian suuri.
Kun myrsky vihdoin tyyntyi, j√§ljell√§ oli vain hiljainen taivas ja √§idin syd√§nt√§ painava huoli.
Lent√§v√§ apina ker√§si rohkeutensa ja h√§nen oli l√§hdett√§v√§ etsim√§√§n kadonneita lapsiaan.
Jokainen niist√§ saattoi olla miss√§ p√§in Eurooppaa tahansa.

Vain sin√§ voisit auttaa h√§nt√§ t√§ss√§ vaikeassa tilanteessa.
Auttaisitko h√§nt√§ pelaaja?""")


def get_european_countries(yhteys):
    """Hae kaikki Euroopan maat tietokannasta"""
    try:
        kursori = yhteys.cursor()

        # Kokeile eri kentt√§nimi√§ - flight_game tietokannassa kent√§t voivat olla eri nimiset
        try:
            # Ensimm√§inen yritys: country_name
            kursori.execute("SELECT iso_country, country_name FROM country WHERE continent = 'EU'")
            maat = kursori.fetchall()
        except mysql.connector.Error as err:
            if "Unknown column 'country_name'" in str(err):
                try:
                    # Toinen yritys: name
                    kursori.execute("SELECT iso_country, name FROM country WHERE continent = 'EU'")
                    maat = kursori.fetchall()
                except mysql.connector.Error as err2:
                    if "Unknown column 'name'" in str(err2):
                        try:
                            # Kolmas yritys: pelkk√§ iso_country (k√§ytet√§√§n sit√§ my√∂s nimeksi)
                            kursori.execute("SELECT iso_country, iso_country FROM country WHERE continent = 'EU'")
                            maat = kursori.fetchall()
                        except mysql.connector.Error as err3:
                            # Jos mik√§√§n ei toimi, kokeile ilman continent-ehtoa
                            try:
                                kursori.execute("SELECT iso_country, iso_country FROM country LIMIT 50")
                                maat = kursori.fetchall()
                                print("Varoitus: K√§ytet√§√§n kaikkia maita, koska continent-kentt√§√§ ei l√∂ydy")
                            except mysql.connector.Error as err4:
                                print(f"Virhe: Ei voitu hakea maita tietokannasta. Tarkista country-taulun rakenne.")
                                print(f"Virhe: {err4}")
                                kursori.close()
                                return []
                    else:
                        raise err2
            else:
                raise err

        kursori.close()

        # Jos ei l√∂ydy maita, yrit√§ hakea kaikki maat
        if not maat:
            print("Varoitus: Euroopan maita ei l√∂ytynyt, haetaan kaikki maat...")
            try:
                kursori = yhteys.cursor()
                kursori.execute("SELECT iso_country, iso_country FROM country LIMIT 47")
                maat = kursori.fetchall()
                kursori.close()
            except mysql.connector.Error as err:
                print(f"Virhe maiden hakemisessa: {err}")
                return []

        return maat

    except mysql.connector.Error as err:
        print(f"Virhe maiden hakemisessa: {err}")
        return []


def save_child_locations(yhteys, kayttajanimi, lapsi_sijainnit):
    """Tallenna lasten sijainnit tietokantaan"""
    try:
        kursori = yhteys.cursor()

        # Poista vanhat sijainnit (jos pelaaja aloittaa uuden pelin)
        kursori.execute("DELETE FROM child_locations WHERE screen_name = %s", (kayttajanimi,))

        # Tallenna uudet sijainnit
        for lapsi_numero, (iso_country, country_name) in enumerate(lapsi_sijainnit, 1):
            kursori.execute(
                "INSERT INTO child_locations (screen_name, child_number, iso_country, country_name, found) VALUES (%s, %s, %s, %s, %s)",
                (kayttajanimi, lapsi_numero, iso_country, country_name, False)
            )

        kursori.close()
        return True
    except mysql.connector.Error as err:
        # Jos child_locations taulu ei ole olemassa, luodaan se
        if "doesn't exist" in str(err):
            try:
                print("Luodaan child_locations taulu...")
                kursori = yhteys.cursor()
                kursori.execute("""
                                CREATE TABLE child_locations
                                (
                                    id           INT PRIMARY KEY AUTO_INCREMENT,
                                    screen_name  VARCHAR(50)  NOT NULL,
                                    child_number INT          NOT NULL,
                                    iso_country  VARCHAR(2)   NOT NULL,
                                    country_name VARCHAR(100) NOT NULL,
                                    found        BOOLEAN DEFAULT FALSE
                                )
                                """)

                # Tallenna sijainnit uuteen tauluun
                for lapsi_numero, (iso_country, country_name) in enumerate(lapsi_sijainnit, 1):
                    kursori.execute(
                        "INSERT INTO child_locations (screen_name, child_number, iso_country, country_name, found) VALUES (%s, %s, %s, %s, %s)",
                        (kayttajanimi, lapsi_numero, iso_country, country_name, False)
                    )

                kursori.close()
                print("child_locations taulu luotu ja sijainnit tallennettu!")
                return True

            except mysql.connector.Error as create_err:
                print(f"Virhe taulun luomisessa: {create_err}")
                return False
        else:
            print(f"Virhe lasten sijaintien tallentamisessa: {err}")
            return False


def load_child_locations(yhteys, kayttajanimi):
    """Lataa lasten sijainnit tietokannasta"""
    try:
        kursori = yhteys.cursor()
        kursori.execute(
            "SELECT child_number, iso_country, country_name, found FROM child_locations WHERE screen_name = %s ORDER BY child_number",
            (kayttajanimi,)
        )
        sijainnit = kursori.fetchall()
        kursori.close()
        return sijainnit
    except mysql.connector.Error as err:
        print(f"Virhe lasten sijaintien lataamisessa: {err}")
        return []


def generate_child_locations(yhteys, kayttajanimi, on_uusi_peli):
    """Generoi tai lataa lasten sijainnit"""
    if not on_uusi_peli:
        # Lataa vanhan pelin sijainnit
        tallennetut_sijainnit = load_child_locations(yhteys, kayttajanimi)
        if tallennetut_sijainnit:
            print(f"\nLadataan vanhan pelin sijainnit...")
            lapsi_sijainnit = []
            for lapsi_numero, iso_country, country_name, found in tallennetut_sijainnit:
                lapsi_sijainnit.append((iso_country, country_name, found))
            return lapsi_sijainnit

    # Luo uudet sijainnit
    print(f"\nGeneroidaan uudet sijainnit lapsille...")
    euroopan_maat = get_european_countries(yhteys)

    if len(euroopan_maat) < 10:
        print("Virhe: Tietokannassa ei ole tarpeeksi Euroopan maita!")
        return []

    # Arvo 10 satunnaista maata
    valitut_maat = random.sample(euroopan_maat, 10)
    lapsi_sijainnit = [(iso_country, country_name, False) for iso_country, country_name in valitut_maat]

    # Tallenna sijainnit tietokantaan
    if save_child_locations(yhteys, kayttajanimi, valitut_maat):
        print("Lasten sijainnit generoitu ja tallennettu!")
    else:
        print("Virhe sijaintien tallentamisessa!")

    return lapsi_sijainnit


def flying_animation():
    """Animaatio lent√§v√§st√§ apinasta pilvien ohitse"""
    frames = [
        "                  ‚òÅÔ∏è              ‚òÅÔ∏è",
        "         üêí    ‚òÅÔ∏è                  ‚òÅÔ∏è",
        "           üêí ‚òÅÔ∏è                      ‚òÅÔ∏è",
        "  ‚òÅÔ∏è         üêí        ‚òÅÔ∏è",
        "     ‚òÅÔ∏è        üêí         ‚òÅÔ∏è",
        "        ‚òÅÔ∏è       üêí",
        "           ‚òÅÔ∏è      üêí    ‚òÅÔ∏è",
        "              ‚òÅÔ∏è    üêí      ‚òÅÔ∏è",
        "                ‚òÅÔ∏è  üêí        ‚òÅÔ∏è",
        "                  ‚òÅÔ∏èüêí          ‚òÅÔ∏è",
    ]

    for i in range(20):  # toista animaatio
        clear()
        print("LENT√ÑM√ÑSS√Ñ...")
        print()
        print(frames[i % len(frames)])
        print()
        print("√Ñitiapina lent√§√§ m√§√§r√§np√§√§h√§ns√§...")
        time.sleep(0.2)


def get_country_ascii_art(country_name, lapsi_loydetty):
    """Palauta ASCII art maalle ja tieto l√∂ytyik√∂ lapsi"""
    ascii_arts = {
        'ruotsi': {
            'art': """
    üè∞ TUKHOLMAN VANHA KAUPUNKI üè∞

           ‚õ™Ô∏è
          /|\\
         / | \\
        /  |  \\
       üè†üè†üè†üè†üè†
      üåäüåäüåäüåäüåäüåä
     üö¢      ü¶Üü¶Ü
    """,
            'with_child': "üêí L√ñYSIT KADONNEESTA APINAPOIKASESTA! üêí",
            'without_child': "Ei apinaa t√§√§ll√§... üòî"
        },

        'iso-britannia': {
            'art': """
    üá¨üáß BIG BEN - LONTOO üá¨üáß

         üïê
        |---|
        |   |
        |   |
        |   |
        |   |
     üèõÔ∏èüèõÔ∏èüèõÔ∏èüèõÔ∏èüèõÔ∏è
    üöå     üëë
    """,
            'with_child': "üêí L√ñYSIT KADONNEESTA APINAPOIKASESTA! üêí",
            'without_child': "Ei apinaa t√§√§ll√§... üòî"
        },

        'ranska': {
            'art': """
    üá´üá∑ EIFFEL-TORNI - PARIISI üá´üá∑

        ‚≠ê
       /|\\
      / | \\
     /  |  \\
    |   |   |
    |   |   |
   üèõÔ∏èüèõÔ∏èüèõÔ∏èüèõÔ∏èüèõÔ∏è
   ü•ê    üé®
    """,
            'with_child': "üêí L√ñYSIT KADONNEESTA APINAPOIKASESTA! üêí",
            'without_child': "Ei apinaa t√§√§ll√§... üòî"
        },

        'espanja': {
            'art': """
    üá™üá∏ SAGRADA FAMILIA - BARCELONA üá™üá∏

      ‚õ™Ô∏è  ‚õ™Ô∏è  ‚õ™Ô∏è
     /|\\ /|\\ /|\\
    üèóÔ∏èüèóÔ∏èüèóÔ∏èüèóÔ∏èüèóÔ∏è
    |  SAGRADA  |
    |  FAMILIA  |
   üåÆ    üíÉ    üé≠
    """,
            'with_child': "üêí L√ñYSIT KADONNEESTA APINAPOIKASESTA! üêí",
            'without_child': "Ei apinaa t√§√§ll√§... üòî"
        },

        'default': {
            'art': f"""
    üåç {country_name.upper()} üåç

       üèõÔ∏è  üè∞  üèõÔ∏è
      üå≥üå≥üå≥üå≥üå≥
     üè†üè†üè†üè†üè†üè†
    üõ§Ô∏è  üö∂‚Äç‚ôÇÔ∏è   üöó  üõ§Ô∏è
    """,
            'with_child': "üêí L√ñYSIT KADONNEESTA APINAPOIKASESTA! üêí",
            'without_child': "Ei apinaa t√§√§ll√§... üòî"
        }
    }

    # Hae maan ASCII art tai k√§yt√§ oletusta
    country_key = country_name.lower()
    art_data = ascii_arts.get(country_key, ascii_arts['default'])

    result = art_data['art']
    if lapsi_loydetty:
        result += f"\n{art_data['with_child']}"
    else:
        result += f"\n{art_data['without_child']}"

    return result


def list_european_countries(yhteys):
    """Listaa kaikki Euroopan maat"""
    maat = get_european_countries(yhteys)
    if not maat:
        print("Virhe: Euroopan maita ei voitu hakea tietokannasta!")
        return

    print("\n" + "=" * 50)
    print("EUROOPAN MAAT")
    print("=" * 50)

    for i, (iso_country, country_name) in enumerate(maat, 1):
        print(f"{i:2d}. {country_name} ({iso_country})")

    print("=" * 50)
    print(f"Yhteens√§ {len(maat)} maata")


def find_country_by_name(yhteys, syotetty_maa):
    """Etsi maa nimell√§ tai ISO-koodilla"""
    maat = get_european_countries(yhteys)

    # Normalisoi sy√∂te
    syotetty_maa = syotetty_maa.lower().strip()

    for iso_country, country_name in maat:
        if (syotetty_maa == country_name.lower() or
                syotetty_maa == iso_country.lower()):
            return iso_country, country_name

    return None, None


def mark_child_found(yhteys, kayttajanimi, iso_country):
    """Merkitse lapsi l√∂ydetyksi"""
    try:
        kursori = yhteys.cursor()
        kursori.execute(
            "UPDATE child_locations SET found = TRUE WHERE screen_name = %s AND iso_country = %s",
            (kayttajanimi, iso_country)
        )
        kursori.close()
        return True
    except mysql.connector.Error as err:
        print(f"Virhe lapsen merkitsemisess√§ l√∂ydetyksi: {err}")
        return False


def get_found_children_count(yhteys, kayttajanimi):
    """Hae l√∂ydettyjen lasten m√§√§r√§"""
    try:
        kursori = yhteys.cursor()
        kursori.execute(
            "SELECT COUNT(*) FROM child_locations WHERE screen_name = %s AND found = TRUE",
            (kayttajanimi,)
        )
        tulos = kursori.fetchone()
        kursori.close()
        return tulos[0]
    except mysql.connector.Error as err:
        print(f"Virhe l√∂ydettyjen lasten laskemisessa: {err}")
        return 0


def is_child_in_country(yhteys, kayttajanimi, iso_country):
    """Tarkista onko lapsessa tietyss√§ maassa"""
    try:
        kursori = yhteys.cursor()
        kursori.execute(
            "SELECT COUNT(*) FROM child_locations WHERE screen_name = %s AND iso_country = %s",
            (kayttajanimi, iso_country)
        )
        tulos = kursori.fetchone()
        kursori.close()
        return tulos[0] > 0
    except mysql.connector.Error as err:
        print(f"Virhe lapsen etsimisess√§: {err}")
        return False


def play_main_game(yhteys, kayttajanimi):
    """Pelin p√§√§silmukka"""
    print("\n" + "=" * 60)
    print("ETSINT√Ñ ALKAA!")
    print("=" * 60)
    print("Olet nyt Suomessa. √Ñitiapina on valmis lent√§m√§√§n etsim√§√§n lapsiaan.")
    print("üí° Vinkki: Kirjoita '/help' n√§hd√§ksesi kaikki Euroopan maat")

    # N√§yt√§ pelaajan pistem√§√§r√§
    pistem√§√§r√§ = get_completion_score(yhteys, kayttajanimi)
    if pistem√§√§r√§ > 0:
        print(f"üèÜ L√§p√§isypisteit√§si: {pistem√§√§r√§}")
        if pistem√§√§r√§ >= 10:
            print("üëë MESTARIN TASO SAAVUTETTU!")

    # Tarkista onko pelaajalla jo lapsia l√∂ytynyt (jatkuva peli)
    alkuperaiset_loydetyt = get_found_children_count(yhteys, kayttajanimi)
    if alkuperaiset_loydetyt > 0:
        print(f"üìä Jatkat peli√§ - sinulla on jo {alkuperaiset_loydetyt}/10 lasta l√∂ydetty")

    while True:
        loydetyt_lapset = get_found_children_count(yhteys, kayttajanimi)

        print(f"\nüìä Edistyminen: {loydetyt_lapset}/10 lasta l√∂ydetty")

        if loydetyt_lapset >= 10:
            # PELI L√ÑP√ÑISTY!
            clear()

            # P√§ivit√§ l√§p√§isypisteet
            uusi_pistem√§√§r√§ = update_completion_score(yhteys, kayttajanimi)

            print("=" * 60)
            print("üéâ ONNITTELUT! L√ñYSIT KAIKKI LAPSET! üéâ")
            print("=" * 60)
            print("√Ñitiapina on onnellinen - kaikki h√§nen lapsensa ovat turvassa!")
            print("Perhe on j√§lleen yhdess√§!")

            # N√§yt√§ voitto ASCII art
            victory_art = victory_ascii_art().format(uusi_pistem√§√§r√§)
            print(victory_art)

            # Tarkista saavutettiinko 10 l√§p√§isy√§
            if uusi_pistem√§√§r√§ == 10:
                input("\nPaina enter n√§hd√§ksesi erikoisyll√§tyksen...")
                champion_celebration_animation()
                clear()
                print("\nüéñÔ∏è OLET SAAVUTTANUT MESTARIN TASON! üéñÔ∏è")
                print("T√§m√§ oli 10. l√§p√§isysi - uskomaton saavutus!")

            elif uusi_pistem√§√§r√§ > 10:
                print(f"\nüëë MESTARI! T√§m√§ oli {uusi_pistem√§√§r√§}. l√§p√§isysi!")

            print(f"\nüèÜ Sait yhden l√§p√§isypisteen! Yhteens√§: {uusi_pistem√§√§r√§}")

            # Kysyy haluaako pelata uudelleen
            print("\n" + "=" * 60)
            uusi_peli = input("Haluatko pelata uudelleen? (k/e): ").lower().strip()

            if uusi_peli in ['k', 'kyll√§', 'yes', 'y']:
                # Nollaa pelin tila ja aloita alusta
                if reset_game_progress(yhteys, kayttajanimi):
                    clear()
                    print("üîÑ Aloitetaan uusi seikkailu!")
                    print("Myrsky iskee j√§lleen ja hajottaa perhe...")
                    input("Paina enter jatkaaksesi...")

                    # Generoi uudet sijainnit
                    lapsi_sijainnit = generate_child_locations(yhteys, kayttajanimi, True)
                    if not lapsi_sijainnit:
                        print("Virhe: Uutta peli√§ ei voitu aloittaa!")
                        break

                    clear()
                    print("üå™Ô∏è Uusi myrsky, uudet sijainnit - seikkailu jatkuu!")
                    continue
                else:
                    print("Virhe uuden pelin aloittamisessa.")
                    break
            else:
                print("\nüëã Kiitos pelaamisesta! N√§kemiin!")
                break

        # Kysy minne menn√§
        print(f"\nüåç Minne Euroopan maahan haluat menn√§?")
        vastaus = input("Sy√∂t√§ maan nimi (tai /help listalle): ").strip()

        # Tarkista komennot
        if vastaus.lower() == '/help':
            list_european_countries(yhteys)
            continue

        if not vastaus:
            print("Sy√∂t√§ maan nimi!")
            continue

        # Etsi maa
        iso_country, country_name = find_country_by_name(yhteys, vastaus)

        if not iso_country:
            print(f"‚ùå Maata '{vastaus}' ei l√∂ytynyt. Tarkista kirjoitusasu tai k√§yt√§ /help")
            continue

        # Lent√§misanimaatio
        print(f"\nüõ´ Lent√§m√§ss√§ maahan: {country_name}")
        flying_animation()

        clear()

        # Tarkista onko lapsista t√§ss√§ maassa
        lapsi_maassa = is_child_in_country(yhteys, kayttajanimi, iso_country)

        # N√§yt√§ ASCII art
        print("=" * 60)
        print(f"SAAVUIT MAAHAN: {country_name.upper()}")
        print("=" * 60)

        ascii_art = get_country_ascii_art(country_name, lapsi_maassa)
        print(ascii_art)

        if lapsi_maassa:
            # Merkitse lapsi l√∂ydetyksi
            mark_child_found(yhteys, kayttajanimi, iso_country)
            loydetyt_lapset += 1
            print(f"\nüéâ Mahtavaa! L√∂ysit yhden lapsistasi!")
            print(f"üìä Nyt olet l√∂yt√§nyt {loydetyt_lapset}/10 lasta")
        else:
            print(f"\nüòî Ei l√∂ytynyt lasta t√§√§lt√§. Jatka etsimist√§!")

        input("\nPaina enter jatkaaksesi...")
        clear()


def check_user_exists(yhteys, kayttajanimi):
    """Tarkista onko k√§ytt√§j√§ jo olemassa tietokannassa"""
    try:
        kursori = yhteys.cursor()
        kursori.execute("SELECT COUNT(*) FROM game WHERE screen_name = %s", (kayttajanimi,))
        tulos = kursori.fetchone()
        kursori.close()
        return tulos[0] > 0
    except mysql.connector.Error as err:
        print(f"Virhe tietokannassa: {err}")
        return False


def update_completion_score(yhteys, kayttajanimi):
    """P√§ivit√§ pelaajan l√§p√§isypisteet"""
    try:
        kursori = yhteys.cursor()

        # Tarkista onko completions-kentt√§ olemassa
        try:
            # Lis√§√§ l√§p√§isypiste
            kursori.execute(
                "UPDATE game SET completions = completions + 1 WHERE screen_name = %s",
                (kayttajanimi,)
            )

            # Hae uusi pistem√§√§r√§
            kursori.execute(
                "SELECT completions FROM game WHERE screen_name = %s",
                (kayttajanimi,)
            )
            tulos = kursori.fetchone()
            pistem√§√§r√§ = tulos[0] if tulos else 1

        except mysql.connector.Error as col_err:
            if "Unknown column 'completions'" in str(col_err):
                # Completions-kentt√§ puuttuu, lis√§t√§√§n se
                print("Lis√§t√§√§n completions-kentt√§ tietokantaan...")
                kursori.execute("ALTER TABLE game ADD COLUMN completions INT DEFAULT 0")

                # Asetetaan t√§lle pelaajalle 1 piste
                kursori.execute(
                    "UPDATE game SET completions = 1 WHERE screen_name = %s",
                    (kayttajanimi,)
                )
                pistem√§√§r√§ = 1
            else:
                raise col_err

        kursori.close()
        return pistem√§√§r√§

    except mysql.connector.Error as err:
        print(f"Virhe pistem√§√§r√§n p√§ivitt√§misess√§: {err}")
        return 1


def get_completion_score(yhteys, kayttajanimi):
    """Hae pelaajan l√§p√§isypisteet"""
    try:
        kursori = yhteys.cursor()

        try:
            kursori.execute(
                "SELECT completions FROM game WHERE screen_name = %s",
                (kayttajanimi,)
            )
            tulos = kursori.fetchone()
            kursori.close()
            return tulos[0] if tulos else 0

        except mysql.connector.Error as col_err:
            if "Unknown column 'completions'" in str(col_err):
                # Completions-kentt√§ puuttuu, palautetaan 0
                kursori.close()
                return 0
            else:
                kursori.close()
                raise col_err

    except mysql.connector.Error as err:
        print(f"Virhe pistem√§√§r√§n hakemisessa: {err}")
        return 0


def champion_celebration_animation():
    """Erikoisanimaatio 10 l√§p√§isyn j√§lkeen"""
    frames = [
        """
    üéÜüéÜüéÜ MESTARI! üéÜüéÜüéÜ

         üëë
        üêí‚ú®
       /   \\
      üèÜ   üèÜ

    üéâüéäüéâüéäüéâüéäüéâüéäüéâ
        """,
        """
    üéÜüéÜüéÜ MESTARI! üéÜüéÜüéÜ

         üëë
        ‚ú®üêí
       /   \\
      üèÜ   üèÜ

    üéäüéâüéäüéâüéäüéâüéäüéâüéä
        """,
        """
    üéÜüéÜüéÜ MESTARI! üéÜüéÜüéÜ

         üëë
        üêí‚≠ê
       /   \\
      üèÜ   üèÜ

    üéâüéäüéâüéäüéâüéäüéâüéäüéâ
        """,
        """
    üéÜüéÜüéÜ MESTARI! üéÜüéÜüéÜ

         üëë
        ‚≠êüêí‚ú®
       /   \\
      üèÜ   üèÜ

    üéäüéâüéäüéâüéäüéâüéäüéâüéä
        """
    ]

    for i in range(25):  # toista animaatio
        clear()
        print(frames[i % len(frames)])
        print("\nüéñÔ∏è  OLET SAAVUTTANUT MESTARIN TASON!  üéñÔ∏è")
        print("10 PELI√Ñ L√ÑP√ÑISTY - USKOMATON SUORITUS!")
        print("\nüåü √Ñitiapina on ikuisesti kiitollinen avustasi! üåü")
        time.sleep(0.3)


def victory_ascii_art():
    """ASCII art pelin p√§√§ttyess√§"""
    return """
    üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ

           KIITOS AVUSTA!
        OLET OLLUT SUURI APU!

              üëë
             üòâüêí    <- Vinkkaa silm√§√§
            /  |  \\
           üèÜ  |  üèÜ  <- Pokaali molemmissa k√§siss√§
              / \\
             üëü üëü

        ‚ú® KAIKKI LAPSET PELASTETTU! ‚ú®

    üèÜ L√§p√§isypisteit√§ yhteens√§: {} üèÜ

    üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ
    """


def reset_game_progress(yhteys, kayttajanimi):
    """Nollaa pelin edistyminen uutta peli√§ varten"""
    try:
        kursori = yhteys.cursor()
        # Poista vanhat lasten sijainnit
        kursori.execute("DELETE FROM child_locations WHERE screen_name = %s", (kayttajanimi,))
        kursori.close()
        return True
    except mysql.connector.Error as err:
        print(f"Virhe pelin nollaamisessa: {err}")
        return False


def create_new_user(yhteys, kayttajanimi):
    """Luo uusi k√§ytt√§j√§ tietokantaan"""
    try:
        kursori = yhteys.cursor()

        try:
            # Yrit√§ ensin ilman id:t√§ (olettaen ett√§ se on AUTO_INCREMENT)
            kursori.execute("INSERT INTO game (screen_name) VALUES (%s)", (kayttajanimi,))

        except mysql.connector.Error as insert_err:
            if "doesn't have a default value" in str(insert_err) and "id" in str(insert_err):
                # ID-kentt√§ ei ole AUTO_INCREMENT, generoidaan satunnainen ID
                import random
                random_id = random.randint(1, 999999)

                # Tarkista ettei ID ole jo k√§yt√∂ss√§
                kursori.execute("SELECT COUNT(*) FROM game WHERE id = %s", (random_id,))
                if kursori.fetchone()[0] > 0:
                    # Jos ID on k√§yt√∂ss√§, kokeile muutama kerta
                    for _ in range(10):
                        random_id = random.randint(1, 999999)
                        kursori.execute("SELECT COUNT(*) FROM game WHERE id = %s", (random_id,))
                        if kursori.fetchone()[0] == 0:
                            break

                # Lis√§√§ k√§ytt√§j√§ ID:n kanssa
                kursori.execute("INSERT INTO game (id, screen_name) VALUES (%s, %s)", (random_id, kayttajanimi))
            else:
                # Jokin muu virhe
                raise insert_err

        kursori.close()
        return True

    except mysql.connector.Error as err:
        print(f"Virhe k√§ytt√§j√§n luomisessa: {err}")
        return False


def get_user_progress(yhteys, kayttajanimi):
    """Hae k√§ytt√§j√§n edistyminen tietokannasta"""
    try:
        kursori = yhteys.cursor()
        # Tarkista onko pelaajalla tallennettuja lapsia
        kursori.execute("SELECT COUNT(*) FROM child_locations WHERE screen_name = %s", (kayttajanimi,))
        tulos = kursori.fetchone()
        kursori.close()
        return 1 if tulos[0] > 0 else 0  # Jos lapsia l√∂ytyy, peli on aloitettu
    except mysql.connector.Error as err:
        print(f"Virhe edistymisen hakemisessa: {err}")
        return 0


def handle_user_login(yhteys):
    """K√§sittele k√§ytt√§j√§n sis√§√§nkirjautuminen tai rekister√∂ityminen"""
    clear()

    while True:
        print("=" * 50)
        print("K√ÑYTT√ÑJ√ÑTIETOJEN HALLINTA")
        print("=" * 50)

        vastaus = input("Oletko uusi k√§ytt√§j√§? (k/e): ").lower().strip()

        if vastaus in ['k', 'kyll√§', 'yes', 'y']:
            # Uusi k√§ytt√§j√§
            print("\n--- Uuden k√§ytt√§j√§n luominen ---")
            while True:
                kayttajanimi = input("Sy√∂t√§ haluamasi nimimerkki: ").strip()

                if not kayttajanimi:
                    print("Nimimerkki ei voi olla tyhj√§!")
                    continue

                if check_user_exists(yhteys, kayttajanimi):
                    print(f"K√§ytt√§j√§nimi '{kayttajanimi}' on jo k√§yt√∂ss√§. Kokeile toista nimimerkki√§.")
                    continue

                # Luo uusi k√§ytt√§j√§
                if create_new_user(yhteys, kayttajanimi):
                    print(f"Tervetuloa peliin, {kayttajanimi}!")
                    return kayttajanimi, 0  # uusi k√§ytt√§j√§, edistyminen = 0
                else:
                    print("Virhe k√§ytt√§j√§n luomisessa. Yrit√§ uudelleen.")

        elif vastaus in ['e', 'ei', 'no', 'n']:
            # Vanha k√§ytt√§j√§
            print("\n--- Vanhan k√§ytt√§j√§n kirjautuminen ---")
            while True:
                kayttajanimi = input("Sy√∂t√§ nimimerkkisi: ").strip()

                if not kayttajanimi:
                    print("Nimimerkki ei voi olla tyhj√§!")
                    continue

                if check_user_exists(yhteys, kayttajanimi):
                    edistyminen = get_user_progress(yhteys, kayttajanimi)
                    print(f"Tervetuloa takaisin, {kayttajanimi}!")
                    if edistyminen > 0:
                        print(f"Jatkat peli√§ vaiheesta {edistyminen}.")
                    return kayttajanimi, edistyminen
                else:
                    print(f"K√§ytt√§j√§nime√§ '{kayttajanimi}' ei l√∂ytynyt.")
                    uusi_yritys = input("Haluatko yritt√§√§ uudelleen? (k/e): ").lower().strip()
                    if uusi_yritys not in ['k', 'kyll√§', 'yes', 'y']:
                        break

        else:
            print("Vastaa 'k' (kyll√§) tai 'e' (ei).")
            continue


def main():
    """Pelin p√§√§funktio"""
    # Yhdist√§ tietokantaan
    yhteys = connect_to_database()
    if yhteys is None:
        print("Peli√§ ei voida k√§ynnist√§√§ ilman tietokantayhteytt√§.")
        return

    # N√§yt√§ pelin tarina
    print_story()

    # Odota pelaajan sy√∂tett√§
    input("Paina enter jatkaaksesi: ")

    # N√§yt√§ itkev√§ apina -animaatio
    crying_ape("√Ñitiapina itkee kadonneita lapsiaan...")

    clear()

    # K√§sittele k√§ytt√§j√§n kirjautuminen
    kayttajanimi, edistyminen = handle_user_login(yhteys)

    clear()
    print("=" * 50)
    print("SEIKKAILU ALKAA!")
    print("=" * 50)
    print(f"Pelaaja: {kayttajanimi}")

    # Generoi tai lataa lasten sijainnit
    on_uusi_peli = (edistyminen == 0)
    lapsi_sijainnit = generate_child_locations(yhteys, kayttajanimi, on_uusi_peli)

    if not lapsi_sijainnit:
        print("Virhe: Lasten sijainteja ei voitu luoda!")
        yhteys.close()
        return

    if on_uusi_peli:
        print("Aloitat uuden seikkailun!")
        print("\nMyrsky hajotti √§itiapina ja h√§nen lapsensa ymp√§ri Eurooppaa.")
        print("10 pient√§ apinanpoikasta odottaa pelastustaan eri maissa...")
    else:
        print(f"Jatkat vaiheesta: {edistyminen}")
        print("\nJatkat etsim√§√§n kadonneita lapsia sielt√§, miss√§ j√§it...")

    # N√§yt√§ lasten sijainnit (vain kehitt√§j√§n√§kym√§ - normaalisti piilotettu!)
    kehittaja_nakoyma = input("\nHaluatko n√§hd√§ lasten sijainnit? (VAIN TESTAUSTA VARTEN) (k/e): ").lower().strip()
    if kehittaja_nakoyma in ['k', 'kyll√§', 'yes', 'y']:
        display_child_locations(lapsi_sijainnit)

    print("\n√Ñitiapina on valmis l√§htem√§√§n etsim√§√§n lapsiaan...")
    print("Seikkailu jatkuu...")

    # T√§h√§n voit jatkaa pelin varsinaista pelilogiikkaa

    # Muista sulkea tietokantayhteys lopuksi
    if yhteys:
        yhteys.close()


if __name__ == "__main__":
    main()